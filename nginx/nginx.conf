worker_processes 4;

events {
    worker_connections 2048;
}

http {
    lua_need_request_body on;
    client_max_body_size 1000M;
    client_body_buffer_size 10M;

    log_format collector '$remote_addr|$scheme|$host|$request_method|$server_protocol|$request_uri|$status|$request_time|$request_length|$bytes_sent|$upstream_response_time|$jrpc_method';

    log_format json_combined escape=json '{'
                                '"remote_addr": "$remote_addr", '
                                '"remote_user": "$remote_user", '
                                '"time_local": "$time_local", '
                                '"request": "$request", '
                                '"status": "$status", '
                                '"body_bytes_sent": "$body_bytes_sent", '
                                '"http_referer": "$http_referer", '
                                '"http_user_agent": "$http_user_agent", '
                                '"http_x_forwarded_for": "$http_x_forwarded_for", '
                                '"request_time": "$request_time", '
                                '"response_time": "$upstream_response_time", '
                                '"headers": "$custom_request_headers", '
                                '"jrpc_method": "$jrpc_method"'
                                '},';

    include /etc/nginx/conf.d/*.conf;
    access_by_lua_block {
            local cjson = require "cjson"
            ngx.req.read_body()
            local data = ngx.req.get_body_data()

            if data and string.find(data, '"jsonrpc"') then
                local ok, json_data = pcall(cjson.decode, data)
                if ok then
                    if json_data.method then
                        ngx.var.jrpc_method = json_data.method
                    else
                        if data then
                            ngx.log(ngx.ERR, "Request: ", data)
                        end
                        ngx.var.jrpc_method = "no_method_field"
                    end
                else
                    ngx.var.jrpc_method = "invalid_jsonrpc_request: " .. tostring(json_data)
                end
            else
                ngx.var.jrpc_method = "no_jsonrpc_field"
            end

            -- Capture request headers
            local headers = ngx.req.get_headers()
            local headers_str = ""
            for k, v in pairs(headers) do
                headers_str = headers_str .. k .. ": " .. v .. "\\n"
            end
            ngx.var.custom_request_headers = headers_str
        }
}